## Collection of emulators of some 8 bits machines using SDL2 library,
## including the MEGA65, Commodore LCD and Commodore 65.
##
## Copyright (C)2016-2025 LGB (Gábor Lénárt) <lgblgblgb@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


all:
	$(MAKE) do-all

ARCH			= native
TOPDIR			= ../..

INSTALL_BINDIR		= /usr/local/bin

$(TOPDIR)/build/configure/config-$(ARCH).h $(TOPDIR)/build/configure/config-$(ARCH).make:
	if [ ! -s $(TOPDIR)/build/configure/config-$(ARCH).h -o ! -s $(TOPDIR)/build/configure/config-$(ARCH).make ]; then bash $(TOPDIR)/build/configure/configure --arch=$(ARCH) ; fi
config:
	rm -f $(TOPDIR)/build/configure/config-$(ARCH).h $(TOPDIR)/build/configure/config-$(ARCH).make
	if [ ! -s $(TOPDIR)/build/configure/config-$(ARCH).h -o ! -s $(TOPDIR)/build/configure/config-$(ARCH).make ]; then bash $(TOPDIR)/build/configure/configure --arch=$(ARCH) ; fi

# -- Unfortunately I have to comment out ifneq/endif, as it causes to run configure
# -- twice in parallel :-O I have no idea why ... FIXME
#ifneq ($(wildcard $(TOPDIR)/build/configure/config-$(ARCH).make),)
include $(TOPDIR)/build/configure/config-$(ARCH).make
#endif

IS_TTY			= $(shell tty >/dev/null 2>/dev/null && echo yes || echo no)
SHELL			= bash

SRCS_TARGET		= $(SRCS_TARGET_$(PRG_TARGET))
SRCS_COMMON		= $(SRCS_COMMON_$(PRG_TARGET)) emutools_buildinfo.c
PRG_TOP_REL		= build/bin/$(PRG_TARGET).$(ARCH)
PRG			= $(TOPDIR)/$(PRG_TOP_REL)
COMMONDIR		= $(TOPDIR)/xemu
COMMONOBJPREFIX		= $(TOPDIR)/build/objs/c-$(ARCH)-$(TARGET)-$(PRG_TARGET)--
TARGETOBJPREFIX		= $(TOPDIR)/build/objs/t-$(ARCH)-$(TARGET)-$(PRG_TARGET)--
DEPFILEPREFIX		= $(TOPDIR)/build/objs/m-$(ARCH)-$(TARGET)-$(PRG_TARGET)--make
DEPFILE			= $(DEPFILEPREFIX).depend
DEPALL_BUILDFILES	= Makefile.common configure/config-$(ARCH).h configure/config-$(ARCH).make
DEPALL			= Makefile $(addprefix $(TOPDIR)/build/, $(DEPALL_BUILDFILES))
TARGETOBJS		= $(addprefix $(TARGETOBJPREFIX), $(notdir $(SRCS_TARGET:.c=.o)))
COMMONOBJS		= $(addprefix $(COMMONOBJPREFIX), $(notdir $(SRCS_COMMON:.c=.o)))
SRCS_COMMON_PREFIXED	= $(addprefix $(COMMONDIR)/, $(SRCS_COMMON))
SRCS_TARGET_PREFIXED	= $(SRCS_TARGET)
SRCS			= $(SRCS_COMMON_PREFIXED) $(SRCS_TARGET_PREFIXED)
OBJS			= $(TARGETOBJS) $(COMMONOBJS)

ASMOUT			= no
DEBUG			= no
RELEASE			= no
OFFICIALBUILD		= no
SUPERPICKY		= no
MACMINVER		= no

CFLAGS_TARGET		= $(CFLAGS_TARGET_$(PRG_TARGET))
LDFLAGS_TARGET		= $(LDFLAGS_TARGET_$(PRG_TARGET)) $(LDFLAGS_TARGET_$(PRG_TARGET)_ON_$(ARCH))

ifeq ($(SANITIZE), yes)
CONFIG_CFLAGS_DEBUG	+= -fsanitize=address -fno-omit-frame-pointer
CONFIG_CFLAGS_LINK	+= -fsanitize=address -fno-omit-frame-pointer
DEBUG			= yes
endif
ifeq ($(DEBUG), yes)
CFLAGS_OPT		= $(CONFIG_CFLAGS_DEBUG)
CONFIG_CFLAGS_LINK	+= -g
else
CFLAGS_OPT		= $(CONFIG_CFLAGS_OPT)
endif
ifeq ($(NATIVE), yes)
CFLAGS_OPT		+= -mtune=native -march=native
endif
ifeq ($(RELEASE), yes)
CFLAGS_OPT		+= $(CONFIG_CFLAGS_OPT_RELEASE) -DXEMU_RELEASE_BUILD
CONFIG_CFLAGS_LINK	+= $(CONFIG_CFLAGS_OPT_RELEASE)
endif
ifeq ($(OFFICIALBUILD), yes)
CFLAGS_OPT		+= -DXEMU_OFFICIAL_BUILD
endif
ifeq ($(SUPERPICKY), yes)
CONFIG_CFLAGS		+= $(CONFIG_CFLAGS_SUPERPICKY)
endif
ifeq ($(STACKPROTECTOR), yes)
CONFIG_CFLAGS		+= -fstack-protector-strong
CONFIG_CFLAGS_LINK	+= -fstack-protector-strong
endif
ifneq ($(MACMINVER), no)
CONFIG_CFLAGS		+= -mmacosx-version-min=$(MACMINVER)
CONFIG_CFLAGS_LINK	+= -mmacosx-version-min=$(MACMINVER)
endif

CFLAGS			= $(CONFIG_CFLAGS) $(CFLAGS_OPT) $(CFLAGS_TARGET) -I. -I$(TOPDIR) -include build/configure/config-$(ARCH).h
LDFLAGS			= $(CONFIG_CFLAGS_LINK) $(LDFLAGS_TARGET) $(DLSYM_LIBS)

ifeq ($(IS_TTY), yes)
PROGRESS_MARKER_START = "`cat $(TOPDIR)/build/compilation-mark-start-seq.ansi`"
PROGRESS_MARKER_END   = "`cat $(TOPDIR)/build/compilation-mark-end-seq.ansi`"
else
PROGRESS_MARKER_START = "["
PROGRESS_MARKER_END   = "] "
endif
ECHO_BIN = "/bin/echo"

ifeq ($(CONFIG_HAS_WINDRES), yes)
WINDRES_SRC	= $(TOPDIR)/build/windres.rc
WINDRES_OBJ	= $(COMMONOBJPREFIX)windres.res
OBJS		+= $(WINDRES_OBJ)
$(WINDRES_OBJ): $(WINDRES_SRC) $(TOPDIR)/build/xemu.ico $(TOPDIR)/build/windres-manifest.xml $(DEPALL)
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)WINDRES: $<$(PROGRESS_MARKER_END)" 2>/dev/null || true
	$(CONFIG_WINDRES) $< -O coff -o $@
endif

$(TOPDIR)/build/xemu.ico:
	convert $(TOPDIR)/build/xemu-48x48.xpm $@


do-all:
	$(MAKE) $(DEPFILE)
	$(MAKE) $(PRG)


xemu-info:
	@echo "-------------------------------------------"
	@echo "Make architecture: $(ARCH)"
	@echo "Target: $(TARGET)"
	@echo "Shell: $(SHELL)"
	@echo "Program name target: $(PRG_TARGET)"
	@echo "Compiler: $(CONFIG_CC)"
	@echo "Compiler flags: $(CFLAGS)"
	@echo "Windres: $(CONFIG_WINDRES)"
	@echo "Linking flags: $(LDFLAGS)"
	@echo "Requested configuration for CFLAGS: $(CFLAGS_TARGET)"
	@echo "Requested configuration for LDFLAGS: $(LDFLAGS_TARGET)"
	@echo "Xemu-framework needed sources: $(SRCS_COMMON)"
	@echo "Target-specific needed sources: $(SRCS_TARGET)"
	@echo "Dependecy file created: $(DEPFILE)"
	@echo "Executable: $(PRG)"


$(TARGETOBJPREFIX)%.o: %.c $(DEPALL)
ifeq ($(ASMOUT), yes)
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)ASMOUT: $<$(PROGRESS_MARKER_END)" 2>/dev/null || true
	$(CONFIG_CC) $(CFLAGS) -Wa,-adhln -masm=intel -g -c -o /dev/null $< > $(@:.o=.s)
endif
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)COMPILING: $<$(PROGRESS_MARKER_END)" 2>/dev/null || true
	$(CONFIG_CC) $(CFLAGS) -c -o $@ $<

$(COMMONOBJPREFIX)%.o: $(COMMONDIR)/%.c $(DEPALL)
ifeq ($(ASMOUT), yes)
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)ASMOUT: $<$(PROGRESS_MARKER_END)" 2>/dev/null || true
	$(CONFIG_CC) $(CFLAGS) -Wa,-adhln -masm=intel -g -c -o /dev/null $< > $(@:.o=.s)
endif
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)COMPILING: $<$(PROGRESS_MARKER_END)" 2>/dev/null || true
	$(CONFIG_CC) $(CFLAGS) -c -o $@ $<

$(PRG): $(OBJS) $(DEPALL)
	@echo "$(PROGRESS_MARKER_START)CONSTRUCTING: $(DEPFILEPREFIX)-buildinfo.c$(PROGRESS_MARKER_END)"
	@echo "const char XEMU_BUILDINFO_ON[]  = \"`whoami`@`uname -n` on `uname -s` `uname -r`\";" > $(DEPFILEPREFIX)-buildinfo.c
	@echo "const char XEMU_BUILDINFO_AT[]  = \"`date`\";" >> $(DEPFILEPREFIX)-buildinfo.c
	@echo "const char XEMU_BUILDINFO_GIT[] = \"`bash $(TOPDIR)/build/show-git-info`\";" >> $(DEPFILEPREFIX)-buildinfo.c
	@echo "const char XEMU_BUILDINFO_TARGET[] = \"$(PRG_TARGET) ($(PRG)) for $(TARGET) on \" XEMU_ARCH_NAME \" ($(ARCH)) using $(CONFIG_CC)\";" >> $(DEPFILEPREFIX)-buildinfo.c
	@git log -1 --format=%cd --date=format:%Y%m%d%H%M%S > $(TOPDIR)/build/objs/cdate.data || date '+%Y%m%d%H%M%S' > $(TOPDIR)/build/objs/cdate.data
	@echo "$(PROGRESS_MARKER_START)Commit date we're building ($(TOPDIR)/build/objs/cdate.data): `cat $(TOPDIR)/build/objs/cdate.data`$(PROGRESS_MARKER_END)"
	@echo "const char XEMU_BUILDINFO_CDATE[] = \"`cat $(TOPDIR)/build/objs/cdate.data`\";" >> $(DEPFILEPREFIX)-buildinfo.c
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)COMPILING: $(DEPFILEPREFIX)-buildinfo.c$(PROGRESS_MARKER_END)" 2>/dev/null || true
	$(CONFIG_CC) $(CFLAGS) -c -o $(DEPFILEPREFIX)-buildinfo.o $(DEPFILEPREFIX)-buildinfo.c
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)LINKING: $(PRG)$(PROGRESS_MARKER_END)" 2>/dev/null || true
	$(CONFIG_CC) -o $(PRG) $(OBJS) $(DEPFILEPREFIX)-buildinfo.o $(LDFLAGS)

run:	$(PRG)
	../../$(PRG_TOP_REL)

debugrun: $(PRG)
	XEMU_DEBUG_FILE=xemu.log ../../$(PRG_TOP_REL)

strip: $(PRG)
	$(CONFIG_STRIP) $(PRG)

install:
	@echo "Checking if target is UNIX ..."
	test TARGET_IS_UNIX_$(TARGET_IS_UNIX) = TARGET_IS_UNIX_yes || exit 1
	$(MAKE) $(PRG)
	strip $(PRG)
	@echo "$(PROGRESS_MARKER_START)INSTALLING: $(PRG) -> $(INSTALL_BINDIR)/xemu-`basename $(PRG) .$(ARCH)`$(PROGRESS_MARKER_END)"
	mkdir -p $(INSTALL_BINDIR)
	cp $(PRG) "$(INSTALL_BINDIR)/xemu-`basename $(PRG) .$(ARCH)`"
	ls -l "$(INSTALL_BINDIR)/xemu-`basename $(PRG) .$(ARCH)`"

dep:
	rm -f $(DEPFILE)
	$(MAKE) $(DEPFILE)

$(DEPFILE): $(DEPALL) $(SRCS)
	@$(ECHO_BIN) -n "$(PROGRESS_MARKER_START)DEPENDENCY: $@$(PROGRESS_MARKER_END)" 2>/dev/null || true
	rm -f $(DEPFILEPREFIX)-target-pre.depend $(DEPFILEPREFIX)-common-pre.depend $(DEPFILEPREFIX)-target.depend $(DEPFILEPREFIX)-common.depend
	if [ "$(CONFIG_CC)" != "" -a -s "$(TOPDIR)/build/configure/config-$(ARCH).make" ]; then $(CONFIG_CC) -MM $(CFLAGS) $(SRCS_TARGET_PREFIXED) > $(DEPFILEPREFIX)-target-pre.depend && awk '/^[^.:\t ]+\.o:/ { print "$(TARGETOBJPREFIX)" $$0 ; next } { print }' < $(DEPFILEPREFIX)-target-pre.depend > $(DEPFILEPREFIX)-target.depend && $(CONFIG_CC) -MM $(CFLAGS) $(SRCS_COMMON_PREFIXED) > $(DEPFILEPREFIX)-common-pre.depend && awk '/^[^.:\t ]+\.o:/ { print "$(COMMONOBJPREFIX)" $$0 ; next } { print }' < $(DEPFILEPREFIX)-common-pre.depend > $(DEPFILEPREFIX)-common.depend && cat $(DEPFILEPREFIX)-target.depend $(DEPFILEPREFIX)-common.depend > $@ && rm -f $(DEPFILEPREFIX)-target-pre.depend $(DEPFILEPREFIX)-common-pre.depend ; else echo "*** Ignoring dependency creation, no configuration exists yet" ; fi

clean:
	rm -f $(TOPDIR)/build/objs/?-$(ARCH)-$(TARGET)-* $(PRG)

dll32:
	cp `i686-w64-mingw32-sdl2-config --prefix`/bin/SDL2.dll $(TOPDIR)/build/bin/

dll64:
	cp `x86_64-w64-mingw32-sdl2-config --prefix`/bin/SDL2.dll $(TOPDIR)/build/bin/

wine64:
	$(MAKE) ARCH=win64
	$(MAKE) dll64
	wine $(TOPDIR)/build/bin/$(PRG_TARGET).win64

wine32:
	$(MAKE) ARCH=win32
	$(MAKE) dll32
	wine $(TOPDIR)/build/bin/$(PRG_TARGET).win32

web:
	@grep -Eq '^[\t ]*#[\t ]*define[\t ]+CONFIG_EMSCRIPTEN_OK' xemu-target.h || { echo "ERROR: emscripten compilation is not enabled for this target." >&2 ; false; }
	$(MAKE) ARCH=html
	python3 ../../build/webserver.py 8000
	sleep .1
	xdg-open http://localhost:8000/$(PRG_TARGET).html?uts=`date '+%s'`

.PHONY: clean all strip dep do-all run debugrun xemu-info config install dll32 dll64 wine32 wine64 web

ifneq ($(wildcard $(DEPFILE)),)
include $(DEPFILE)
endif
