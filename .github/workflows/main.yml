name: CI

on:
  push:
    branches:
      - master
      - next
      - dev
  pull_request:
    branches:
      - master
      - next
      - dev
  workflow_dispatch:
    branches:
      - master
      - next
      - dev
    inputs:
      deploy:
        description: 'Do you want DEPLOYMENT onto the download page?'
        required: false
        default: 'false'


jobs:
  linux:
    name: Linux (and Windows) build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Custom Build Variables
        uses: ./.github/actions/set-custom-build-variables

      - name: Deployment request status
        if: env.should_deploy == 'true'
        run: echo "ENABLED (if you see this)"

      - name: Current builder/repo info
        run: |
          echo "Running builder at `pwd` as `whoami`@`hostname` on `uname -a`"
          echo "--- GIT INFO ---"
          bash build/show-git-info | tee /tmp/show-git-info || true
          echo "--- CURRENT DIRECTORY ---"
          pwd
          ls -la
          echo "--- PARENT DIRECTORY ---"
          ls -la ..

      - name: Show shell variables
        run: env | grep -vE 'SECRET|TOKEN|HOOK' || true

      - name: Install Ubuntu packages
        run: |
          sudo apt-get -y -yq update || true
          sudo apt-get -y -yq --no-install-suggests --no-install-recommends install alien bash binutils-mingw-w64-i686 binutils-mingw-w64-x86-64 bison build-essential bzip2 coreutils curl deborphan dpkg fakeroot file g++ gawk gcc gcc-mingw-w64-i686 gcc-mingw-w64-x86-64 git libc6-dev libc-bin libcurl4-openssl-dev libgtk-3-dev libreadline6-dev libsdl2-dev lsb-release make sed tar util-linux vim-common wget zip

      - name: List of all installed packages
        run: dpkg -l | cat || true

      - name: Show build system info
        run: bash build/show-sys-info

      - name: Show native SDL2 status
        run: |
          ls -l `which sdl2-config` || true
          sdl2-config --version --prefix --exec-prefix --cflags --libs --static-libs || true

      - name: Configuring Xemu for Linux (native target)
        run: make RELEASE=yes OFFICIALBUILD=yes config

      - name: Building Xemu for Linux (native target)
        run: make -j 4 RELEASE=yes OFFICIALBUILD=yes

      - name: Strip and list of result binaries for Mac (x86 native target)
        run: for a in build/bin/*.native ; do ls -l $a ; strip $a ; ls -l $a ; done

      - name: Test run of MEGA65 emulator
        run: build/bin/xmega65.native -h || true

      - name: Creating DEB package to be deployed
        if: env.should_deploy == 'true'
        run: |
          make RELEASE=yes OFFICIALBUILD=yes deb
          cp build/bin/*.deb build/bin/*.rpm .
          ls -l *.deb *.rpm

      - name: GIT configuration for deployment
        if: env.should_deploy == 'true'
        run: |
          git config --global user.name "GitHub Actions Xemu Linux Builder"
          git config --global user.email "actions@github.com"

      - name: Installing Windows SDL2 cross-development components
        run: build/install-cross-win-mingw-sdl-on-linux.sh /usr/bin

      - name: Show Windows SDL2 status
        run: |
          echo "*** 64-bit Windows SDL2 status ***"
          ls -l `which x86_64-w64-mingw32-sdl2-config` || true
          x86_64-w64-mingw32-sdl2-config --version --prefix --exec-prefix --cflags --libs --static-libs || true
          echo "*** 32-bit Windows SDL2 status ***"
          ls -l `which i686-w64-mingw32-sdl2-config` || true
          i686-w64-mingw32-sdl2-config --version --prefix --exec-prefix --cflags --libs --static-libs || true

      - name: Configuring Xemu for Windows (cross compilation, 64-bit target)
        run: make RELEASE=yes OFFICIALBUILD=yes ARCH=win64 config

      - name: Building Xemu for Windows (cross compilation, 64-bit target)
        run: make -j 4 RELEASE=yes OFFICIALBUILD=yes ARCH=win64

      - name: Strip and list of result binaries for Windows (cross compilation, 64-bit target)
        run: for a in build/bin/*.win64 ; do ls -l $a ; x86_64-w64-mingw32-strip $a ; ls -l $a ; done

      - name: Configuring Xemu for Windows (cross compilation, 32-bit target)
        if: env.should_deploy == 'true'
        run: make RELEASE=yes OFFICIALBUILD=yes ARCH=win32 config

      - name: Building Xemu for Windows (cross compilation, 32-bit target)
        if: env.should_deploy == 'true'
        run: make -j 4 RELEASE=yes OFFICIALBUILD=yes ARCH=win32

      - name: Strip and list of result binaries for Windows (cross compilation, 32-bit target)
        if: env.should_deploy == 'true'
        run: for a in build/bin/*.win32 ; do ls -l $a ; i686-w64-mingw32-strip $a ; ls -l $a ; done

      - name: Create packages to be deployed
        if: env.should_deploy == 'true'
        run: |
          cp README.md LICENSE AUTHORS build/bin/
          echo "--- Bulding ZIP acrhive ---"
          build/zipper.sh build/bin xemu-binaries-osx.zip build/bin/*.dylib build/bin/*.native README.md LICENSE AUTHORS
          cp build/bin/xemu-binaries-osx.zip .
          ls -l *.zip
          echo "--- Creating DMG distribution ---"
          build/dmg-osx-creator.sh
          echo "--- Before deploy ---"
          build/deploy/before-deploy.sh xemu-deploy MacOS

      - name: Deployment
        if: env.should_deploy == 'truex'
        run: |
          # Clone shared deployment repo
          rm -rf /tmp/shared-deploy-repo
          git clone --depth 1 --branch main https://x-access-token:${{ secrets.XEMU_DEPLOY_TOKEN }}@github.com/lgblgblgb/shared-deploy-repo.git /tmp/shared-deploy-repo

          # Clear and replace linux folder
          rm -rf /tmp/shared-deploy-repo/linux
          mkdir -p /tmp/shared-deploy-repo/linux
          cp -r path/to/build/output/* /tmp/shared-deploy-repo/linux/

          # Commit and push
          cd /tmp/shared-deploy-repo
          git add linux
          git commit -m "Linux deployment from $GITHUB_REPOSITORY ($GITHUB_SHA)"
          git push --force

  macos:
    name: MacOS x86 build
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Custom Build Variables
        uses: ./.github/actions/set-custom-build-variables

      - name: Deployment request status
        if: env.should_deploy == 'true'
        run: echo "ENABLED (if you see this)"

      - name: Current builder/repo info
        run: |
          echo "Running builder at `pwd` as `whoami`@`hostname` on `uname -a`"
          echo "--- GIT INFO ---"
          bash build/show-git-info || true
          echo "--- CURRENT DIRECTORY ---"
          pwd
          ls -la
          echo "--- PARENT DIRECTORY ---"
          ls -la ..

      - name: Show shell variables
        run: env | grep -Ev 'SECRET|TOKEN|HOOK' || true

      - name: Install build/deployment dependencies
        run: build/install-dependencies-osx.sh

      - name: Show build system info
        run: bash build/show-sys-info

      - name: Show Mac SDL2 status
        run: |
          ls -l `which sdl2-config` || true
          sdl2-config --version --prefix --cflags --libs --static-libs || true

      - name: Configuring Xemu for Mac (x86 native target)
        run: make RELEASE=yes OFFICIALBUILD=yes MACMINVER=10.6 config

      - name: Building Xemu for Mac (x86 native target)
        run: make -j 4 RELEASE=yes OFFICIALBUILD=yes MACMINVER=10.6

      - name: Mangle, strip and list of result binaries for Mac (x86 native target)
        run: for a in build/bin/*.native ; do build/mangle_dylib_osx.sh $a ; strip $a ; ls -l $a ; done

      - name: Test run of MEGA65 emulator
        run: build/bin/xmega65.native -h || true

      - name: Create packages to be deployed
        if: env.should_deploy == 'true'
        run: |
          cp README.md LICENSE AUTHORS build/bin/
          echo "--- Bulding ZIP acrhive ---"
          build/zipper.sh build/bin xemu-binaries-osx.zip build/bin/*.dylib build/bin/*.native README.md LICENSE AUTHORS
          cp build/bin/xemu-binaries-osx.zip .
          ls -l *.zip
          echo "--- Creating DMG distribution ---"
          build/dmg-osx-creator.sh
          echo "--- Before deploy ---"
          build/deploy/before-deploy.sh xemu-deploy MacOS

      - name: GIT configuration for deployment
        if: env.should_deploy == 'true'
        run: |
          git config --global user.name "GitHub Actions Xemu Mac Builder"
          git config --global user.email "actions@github.com"

      - name: Deployment
        if: env.should_deploy == 'true'
        run: |
          rm -rf xemu-deploy-orig-repo
          git clone --depth 1 --branch binary-osx-${GITHUB_REF##*/} https://x-access-token:${{ secrets.XEMU_DEPLOY_TOKEN }}@github.com/lgblgblgb/xemu-binaries.git xemu-deploy-orig-repo
          mv xemu-deploy-orig-repo/.git* xemu-deploy/
          rm -fr xemu-deploy-orig-repo
          cd xemu-deploy
          pwd
          touch .nojekyll
          ls -l
          git add .
          git status
          git commit -m "MacOS deployment from $GITHUB_REPOSITORY ($GITHUB_SHA)"
          git push --force
          cd ..

      - name: Announce deployment
        if: env.should_deploy == 'true'
        run: echo "TODO" ; pwd
